#!/usr/bin/env python3

from getpass import getpass
import configparser
import requests
import json
import sys
import os

import urllib3
if hasattr(urllib3, 'disable_warnings'):
    urllib3.disable_warnings()

CONFIG_LOCATION = os.environ.get('VCENTER_CONFIG', '~/.vcenter')
CONFIG_LOCATION_ABSOLUTE = os.path.expanduser(CONFIG_LOCATION)

def load_config(profile):
    config = configparser.ConfigParser(interpolation=None)
    config.read(CONFIG_LOCATION_ABSOLUTE)
    if profile not in config:
        print('Invalid profile:', profile)
    options = dict(config[profile].items())
    return Client(**options)

def update_profile(profile):
    config = configparser.ConfigParser(interpolation=None)
    config.read(CONFIG_LOCATION_ABSOLUTE)
    if profile not in config:
        config.add_section(profile)

    settings = dict(config[profile].items())
    host = settings.get('host', None)
    user = settings.get('user', None)
    password = settings.get('password', None)
    if not host:
        host = input('Enter host (e.g. https://vcenter.las1.dc): ')
    if not user:
        user = input('Enter user: ')
    if not password:
        password = getpass('Enter password: ')

    # Query for session
    client = Client(host=host, user=user, password=password)
    success = client.auth()

    config[profile]['user'] = user
    config[profile]['host'] = host
    config[profile]['session_id'] = client.session_id
    with open(CONFIG_LOCATION_ABSOLUTE, 'w') as f:
        config.write(f)


class Client():
    SESSION_COOKIE = 'vmware-api-session-id'

    def __init__(self, host=None, user=None, password=None, session_id=None):
        self.host = host
        self.user = user
        self.password = password
        self.session_id = session_id

        self.session = requests.Session()
        self.session.header = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
        }
        if self.session_id:
            self.session.cookies[self.SESSION_COOKIE] = session_id


    def auth(self):
        response = self._exec('POST', '/rest/com/vmware/cis/session', auth=(self.user, self.password), check_auth=False)
        try:
            session_id = response.json()['value']
        except Exception as e:
            print('Unable to authenticate!')
            sys.exit(2)
        self.session_id = session_id
        self.session.cookies[self.SESSION_COOKIE] = session_id
        return response.ok

    def _exec(self, method, endpoint, check_auth=True, **options):
        if check_auth and self.SESSION_COOKIE not in self.session.cookies:
            if not self.password:
                raise Exception('Unable to authenticate, please run the auth command')
            self.auth()
        url = '{}{}'.format(self.host, endpoint)
        return self.session.request(method, url, verify=False, **options)


def format_results(response):
    if not response.ok:
        print(response.text)
        return

    data = response.json()
    if isinstance(data, dict) and 'value' in data and isinstance(data['value'], list):
        results = data['value']
    else:
        results = data

    if isinstance(results, list):
        for result in results:
            print(json.dumps(result))
    else:
        print(result)


def main():
    options = list(sys.argv[1:])
    options.reverse()
    if len(options) < 2:
        print('Usage: vcenter <profile> <command>')
        sys.exit(1)
    profile = options.pop()
    command = options.pop()

    if command == 'auth':
        return update_profile(profile)

    client = load_config(profile)
    if command == 'raw':
        method, endpoint = options.pop(), options.pop()
        params = {}
        if method == 'POST' and options:
            params['data'] = json.loads(options.pop())
        elif options:
            params['params'] = json.loads(options.pop())
        response = client._exec(method, endpoint, **params)
    elif command == 'vms':
        query = {}
        for option in options:
            key, value = option.split('=')
            query['filter.' + key] = value
        params = {'params': query}
        response = client._exec('GET', '/rest/vcenter/vm', **params)
    else:
        response = client._exec('GET', '/rest/vcenter/vm')
    format_results(response)


if __name__ == '__main__':
    main()
